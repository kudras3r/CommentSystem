package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/kudras3r/CommentSystem/api/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID string, allowComms bool) (*model.Post, error) {
	// panic(fmt.Errorf("not implemented: CreatePost - createPost"))
	post := &model.Post{
		ID:         strconv.Itoa(len(r.posts) + 1),
		Title:      title,
		Content:    content,
		AuthorID:   authorID,
		AllowComms: allowComms,
		CreatedAt:  time.Now().Format(time.RFC3339),
		Rating:     0,
		Comments:   &model.CommentsConnection{},
	}
	r.posts = append(r.posts, post)

	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, content string, authorID string, parentID *string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID string, allowComms bool) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, first *int32, after *string) ([]*model.Post, error) {
	// panic(fmt.Errorf("not implemented: Posts - posts"))
	return r.GetPosts(ctx)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID string, first *int32, after *string) (*model.CommentsConnection, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: NewComment - newComment"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
